from random import randint


class World_Generator:
    '''
    A class that generates 6 by 7 room for the hw4 roomba.

    ...

    Attributes
    ----------
    percepts : list
        tells whether the agent is in the left room and whether the room it's currently in is clean.

    Methods
    -------
    set_percepts(agent_percepts)
        sets the agent's perception of the environment.
    rules()
        returns an action based on the perception of the environment from the perspective of the agent.
    '''

#NOTE: Might use perlin noise for the walls

    rows = []
    for i in range(7):  # The columns
        for j in range(6):  # The rows
            if i or j == 0:  # If the current location is a perimeter of the room
                rows.append(randint(0, 5))  # Allows the position to become any object
            else:  # If it's not a perimeter position
                rows.append(randint(1,5))



class Simplest_Agent:
    '''
    A class that represents an Agent in the Environment.
    ...
    Attributes
    ----------
    percepts : list
        tells whether the agent is in the left room and whether the room it's currently in is clean.
    Methods
    -------
    set_percepts(agent_percepts)
        sets the agent's perception of the environment.
    rules()
        returns an action based on the perception of the environment from the perspective of the agent.
    '''

    def __init__(self, percepts=None):
        '''
        Parameters
        ----------
        percepts : list
            a list of strings and/or Nones representing the perception of the environment from the perspective of
            the agent.
        performance : int
            an integer representing the number of times the agent has completed a task.
        '''

        self.percepts = percepts
        self.performance = 0
        self.action = "right"

    def set_percepts(self, agent_percepts):
        '''
        Sets the agent's perception of the environment.
        Parameters
        ----------
        percepts : list
            A list of strings and/or Nones that represents the environment from the Agent's perceptions
        '''

        self.percepts = agent_percepts

    def rules(self):
        '''
        Returns an action depending on the agent's perceptions of the environment.
        How our rules work is such:
        This is the simple agent, in case Spell doesn't like what we're doing with our Reflex Agent
        All it does is always turn left if bumped, forward if not.
        I threw some randomness in there to help it out.
        There's no action sequence here, unlike the other bot.
        This one can get stuck much easier.
        -------
        action : str
            a string representing the action the Agent wants to make in the environment.
        '''

        dirt_percept = self.percepts[-1][-1]
        bump_percept = self.percepts[-1][-2]

        if dirt_percept == "dirty":  # duh
            self.action = "suck"
            self.performance += 1
        else:  # if we haven't tried to move yet, let's move right
            if bump_percept == "bump":  # okay, we tried to move and we hit something, let's take our last action and use it to find a new one
                if randint(0, 100) < 5:
                    self.action = "right"
                else:
                    self.action = "left"
            else:
                self.action = "forward"

        return self.action
